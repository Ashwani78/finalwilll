import React, { useState } from 'react';
import { PDFDocument, StandardFonts, rgb } from 'pdf-lib';
import './index.css';

const WillGenerator = () => {
  const [formData, setFormData] = useState({
    testatorName: '',
    occupation: '',
    address: '',
    parish: '',
    executor1: { name: '', relationship: '', occupation: '', address: '', parish: '' },
    executor2: { name: '', relationship: '', occupation: '', address: '', parish: '' },
    funeralDetails: '',
    clothingDetails: '',
    remainsDetails: '',
    songs: ['', ''],
    properties: [
      { address: '', parish: '', volume: '', folio: '', beneficiary: '' },
      { address: '', parish: '', volume: '', folio: '', beneficiary: '' },
      { address: '', parish: '', volume: '', folio: '', beneficiary: '' },
    ],
    shares: [
      { company: '', country: '', exchange: '', accountNumber: '', beneficiary: '' },
      { company: '', country: '', exchange: '', accountNumber: '', beneficiary: '' },
    ],
    insurance: [
      { policyNumber: '', company: '', address: '', country: '', beneficiary: '' },
      { policyNumber: '', company: '', address: '', country: '', beneficiary: '' },
    ],
    bankAccounts: [
      { accountNumber: '', bank: '', address: '', country: '', beneficiary: '' },
      { accountNumber: '', bank: '', address: '', country: '', beneficiary: '' },
      { accountNumber: '', bank: '', address: '', country: '', beneficiary: '' },
    ],
    vehicles: [
      { color: '', make: '', model: '', licensePlate: '', engineNumber: '', chassisNumber: '', beneficiary: '' },
      { color: '', make: '', model: '', licensePlate: '', engineNumber: '', chassisNumber: '', beneficiary: '' },
      { color: '', make: '', model: '', licensePlate: '', engineNumber: '', chassisNumber: '', beneficiary: '' },
    ],
    unpaidSalary: { employer: '', employerAddress: '', beneficiary: '' },
    nhtContributions: { nhtNumber: '', taxNumber: '', beneficiary: '' },
    jewellery: { description: '', beneficiary: '' },
    furniture: { beneficiary: '' },
    paintings: { beneficiary: '' },
    firearm: { serialNumber: '', licenseNumber: '', beneficiary: '' },
    residualEstate: { beneficiaries: '' },
    signatureDate: '',
    witnesses: [
      { name: '', address: '', occupation: '' },
      { name: '', address: '', occupation: '' },
    ],
  });

  const [currentStep, setCurrentStep] = useState(1);
  const totalSteps = 10;

  const handleInputChange = (e, section, field, index = null) => {
    const { value } = e.target;
    setFormData(prevData => {
      if (index !== null) {
        const newArray = [...prevData[section]];
        newArray[index] = { ...newArray[index], [field]: value };
        return { ...prevData, [section]: newArray };
      } else if (section) {
        return {
          ...prevData,
          [section]: { ...prevData[section], [field]: value }
        };
      } else {
        return { ...prevData, [field]: value };
      }
    });
  };

  const generatePDF = async () => {
    const pdfDoc = await PDFDocument.create();
    const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman);
    const timesBoldFont = await pdfDoc.embedFont(StandardFonts.TimesRomanBold);
    
    const addPage = () => {
      const page = pdfDoc.addPage([612, 792]); // US Letter size
      return { page, width: 612, height: 792 };
    };

    let { page, width, height } = addPage();
    let yOffset = height - 50;

    const drawText = (text, { fontSize = 12, font = timesRomanFont, color = rgb(0, 0, 0), underline = false, align = 'left' }) => {
      const textWidth = font.widthOfTextAtSize(text, fontSize);
      let xOffset = 50;
      if (align === 'center') {
        xOffset = (width - textWidth) / 2;
      } else if (align === 'right') {
        xOffset = width - textWidth - 50;
      }

      page.drawText(text, {
        x: xOffset,
        y: yOffset,
        size: fontSize,
        font: font,
        color: color,
      });

      if (underline) {
        page.drawLine({
          start: { x: xOffset, y: yOffset - 2 },
          end: { x: xOffset + textWidth, y: yOffset - 2 },
          thickness: 1,
          color: color,
        });
      }

      yOffset -= fontSize + 10;
    };

    const addNewPageIfNeeded = (neededSpace) => {
      if (yOffset - neededSpace < 50) {
        ({ page, width, height } = addPage());
        yOffset = height - 50;
      }
    };

    // Cover Page
    drawText('LAST WILL AND TESTAMENT', { fontSize: 24, font: timesBoldFont, align: 'center' });
    yOffset -= 20;
    drawText('of', { fontSize: 18, align: 'center' });
    yOffset -= 20;
    drawText(formData.testatorName, { fontSize: 22, font: timesBoldFont, color: rgb(0.8, 0, 0), align: 'center' }); // Testator name in red
    yOffset -= 40;
    drawText(`Date: ${formData.signatureDate}`, { fontSize: 14, align: 'center' });

    // Add a new page for the content
    ({ page, width, height } = addPage());
    yOffset = height - 50;

    // Title
    drawText('LAST WILL AND TESTAMENT', { fontSize: 18, font: timesBoldFont, underline: true });
    yOffset -= 20;

    // Testator Information
    drawText(`THIS IS THE LAST WILL AND TESTAMENT of me ${formData.testatorName}, a ${formData.occupation}`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    drawText(`whose address is ${formData.address} in the parish of ${formData.parish}.`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    yOffset -= 10;

    // Revocation Clause
    drawText('1. I HEREBY REVOKE all Wills and Testamentary dispositions heretofore by me made AND', { fontSize: 12 });
    drawText('DECLARE this to be my Last Will and Testament.', { fontSize: 12 });
    yOffset -= 10;

    // Executors
    addNewPageIfNeeded(150);
    drawText('2. APPOINTMENT OF EXECUTORS', { fontSize: 14, font: timesBoldFont });
    drawText(`I HEREBY APPOINT ${formData.executor1.name}, my ${formData.executor1.relationship} ${formData.executor1.occupation},`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    drawText(`of ${formData.executor1.address}, in the parish of ${formData.executor1.parish} AND`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    drawText(`${formData.executor2.name}, my ${formData.executor2.relationship} ${formData.executor2.occupation},`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    drawText(`of ${formData.executor2.address}, in the parish of ${formData.executor2.parish},`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    drawText('to be the Executor and Trustee of this my Will (hereinafter referred to as "my Trustee").', { fontSize: 12 });
    yOffset -= 10;

    // Funeral Arrangements
    addNewPageIfNeeded(200);
    drawText('3. I DIRECT that as soon as possible after my decease my Trustees shall pay all my just debts, funeral,', { fontSize: 12 });
    drawText('tombstone and testamentary expenses.', { fontSize: 12 });
    yOffset -= 10;

    drawText('4. FUNERAL AND BURIAL ARRANGEMENTS', { fontSize: 14, font: timesBoldFont });
    drawText('I HEREBY DIRECT that my body be prepared for burial in an appropriate manner and that', { fontSize: 12 });
    drawText('my funeral expenses and any debts be paid out of my estate, along with the following:', { fontSize: 12 });
    drawText(`a. That I be ${formData.funeralDetails}`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    drawText(`b. That be clothed in ${formData.clothingDetails}`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    drawText(`c. That my remains be placed ${formData.remainsDetails}`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    drawText('d. That the following songs be included in my funeral programme:', { fontSize: 12 });
    formData.songs.forEach((song, index) => {
      drawText(`   - ${song}`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    });
    drawText('e. That the following song is played at my wedding:', { fontSize: 12 });
    yOffset -= 10;

    // Properties
    addNewPageIfNeeded(200);
    drawText('5. I GIVE DEVISE AND BEQUEATH:', { fontSize: 14, font: timesBoldFont });
    drawText('a. PROPERTY', { fontSize: 12, font: timesBoldFont });
    formData.properties.forEach((property, index) => {
      drawText(`${index + 1}. Property- situate at ${property.address}, in the parish of`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
      drawText(`${property.parish} registered at ${property.volume} and ${property.folio} of the Register Book of`, { fontSize: 12 });
      drawText(`Titles to ${property.beneficiary}.`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
      yOffset -= 10;
    });

    // Shares and Stocks
    addNewPageIfNeeded(150);
    drawText('b. SHARES AND STOCKS', { fontSize: 12, font: timesBoldFont });
    formData.shares.forEach((share, index) => {
      drawText(`${index + 1}. Shares in ${share.company} held in ${share.country} at ${share.exchange}`, { fontSize: 12 });
      drawText(`in account numbered ${share.accountNumber} to ${share.beneficiary}.`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
      yOffset -= 10;
    });

    // Insurance
    addNewPageIfNeeded(150);
    drawText('c. INSURANCE', { fontSize: 12, font: timesBoldFont });
    formData.insurance.forEach((policy, index) => {
      drawText(`${index + 1}. Proceeds of insurance policy numbered ${policy.policyNumber}, held at ${policy.company}`, { fontSize: 12 });
      drawText(`located at ${policy.address}, ${policy.country} to ${policy.beneficiary}.`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
      yOffset -= 10;
    });

    // Bank Accounts
    addNewPageIfNeeded(200);
    drawText('d. BANK ACCOUNTS', { fontSize: 12, font: timesBoldFont });
    formData.bankAccounts.forEach((account, index) => {
      drawText(`${index + 1}. Proceeds of bank account numbered ${account.accountNumber}, held at`, { fontSize: 12 });
      drawText(`${account.bank} located at ${account.address}, ${account.country} to ${account.beneficiary}.`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
      yOffset -= 10;
    });

    // Motor Vehicles
    addNewPageIfNeeded(200);
    drawText('e. MOTOR VEHICLE', { fontSize: 12, font: timesBoldFont });
    formData.vehicles.forEach((vehicle, index) => {
      drawText(`${index + 1}. ${vehicle.color} ${vehicle.make} ${vehicle.model} Motor vehicle bearing`, { fontSize: 12 });
      drawText(`License plate number ${vehicle.licensePlate} and engine and chassis numbers ${vehicle.engineNumber}`, { fontSize: 12 });
      drawText(`and ${vehicle.chassisNumber} to ${vehicle.beneficiary}.`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
      yOffset -= 10;
    });

    // Unpaid Salary
    addNewPageIfNeeded(100);
    drawText('f. UNPAID SALARY AND/EMOLUMENTS', { fontSize: 12, font: timesBoldFont });
    drawText(`Unpaid salary and/or emoluments with my employer, ${formData.unpaidSalary.employer}`, { fontSize: 12 });
    drawText(`located at ${formData.unpaidSalary.employerAddress} to ${formData.unpaidSalary.beneficiary}.`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    yOffset -= 10;

    // NHT Contributions
    addNewPageIfNeeded(100);
    drawText('g. NATIONAL HOUSING TRUST(NHT) CONTRIBUTIONS', { fontSize: 12, font: timesBoldFont });
    drawText(`Refund of National Housing Trust Contributions (${formData.nhtContributions.nhtNumber} and`, { fontSize: 12 });
    drawText(`Tax Registration Number ${formData.nhtContributions.taxNumber}) to ${formData.nhtContributions.beneficiary}.`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    yOffset -= 10;

    // Jewellery
    addNewPageIfNeeded(100);
    drawText('h. JEWELLERY', { fontSize: 12, font: timesBoldFont });
    drawText(`${formData.jewellery.description} to ${formData.jewellery.beneficiary}.`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    yOffset -= 10;

    // Furniture
    addNewPageIfNeeded(100);
    drawText('i. FURNITURE', { fontSize: 12, font: timesBoldFont });
    drawText(`All furniture to ${formData.furniture.beneficiary}.`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    yOffset -= 10;

    // Paintings
    addNewPageIfNeeded(100);
    drawText('j. PAINTINGS', { fontSize: 12, font: timesBoldFont });
    drawText(`All paintings to ${formData.paintings.beneficiary}.`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    yOffset -= 10;

    // Firearm
    addNewPageIfNeeded(100);
    drawText('k. FIREARM', { fontSize: 12, font: timesBoldFont });
    drawText(`Firearm with serial number ${formData.firearm.serialNumber} and license number`, { fontSize: 12 });
    drawText(`${formData.firearm.licenseNumber} to ${formData.firearm.beneficiary}.`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    yOffset -= 10;

    // Residual Estate
    addNewPageIfNeeded(100);
    drawText('l. RESIDUAL ESTATE', { fontSize: 12, font: timesBoldFont });
    drawText(`The residue of my estate to ${formData.residualEstate.beneficiaries}.`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
    yOffset -= 20;

    // Signature and Date
    addNewPageIfNeeded(100);
    drawText(`SIGNED by me on the ${formData.signatureDate}`, { fontSize: 12 });
    drawText('____________________________', { fontSize: 12 });
    drawText('(Testator to sign here)', { fontSize: 10 });
    yOffset -= 20;

    // Witnesses
    drawText('WITNESSES', { fontSize: 14, font: timesBoldFont });
    formData.witnesses.forEach((witness, index) => {
      drawText(`Witness ${index + 1}:`, { fontSize: 12, font: timesBoldFont });
      drawText(`Name: ${witness.name}`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
      drawText(`Address: ${witness.address}`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
      drawText(`Occupation: ${witness.occupation}`, { fontSize: 12, color: rgb(0.8, 0, 0) }); // User input in red
      drawText('____________________________', { fontSize: 12 });
      drawText('(Witness to sign here)', { fontSize: 10 });
      yOffset -= 20;
    });

    const pdfBytes = await pdfDoc.save();
    const blob = new Blob([pdfBytes], { type: 'application/pdf' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'last_will_and_testament.pdf';
    link.click();
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    generatePDF();
  };

  const renderInput = (section, field, label, index = null) => (
    <div className="mb-4" key={`${section}-${field}-${index}`}>
      <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor={`${section}-${field}-${index}`}>
        {label}
      </label>
      <input
        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
        id={`${section}-${field}-${index}`}
        type="text"
        value={index !== null ? formData[section][index][field] : (section ? formData[section][field] : formData[field])}
        onChange={(e) => handleInputChange(e, section, field, index)}
      />
    </div>
  );

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <section>
            <h2 className="text-2xl font-semibold mb-4">Testator Information</h2>
            {renderInput(null, 'testatorName', 'Full Name')}
            {renderInput(null, 'occupation', 'Occupation')}
            {renderInput(null, 'address', 'Address')}
            {renderInput(null, 'parish', 'Parish')}
          </section>
        );
      case 2:
        return (
          <section>
            <h2 className="text-2xl font-semibold mb-4">Executors</h2>
            {['executor1', 'executor2'].map((executor, index) => (
              <div key={executor} className="mb-4">
                <h3 className="text-xl font-semibold mb-2">Executor {index + 1}</h3>
                {renderInput(executor, 'name', 'Name')}
                {renderInput(executor, 'relationship', 'Relationship')}
                {renderInput(executor, 'occupation', 'Occupation')}
                {renderInput(executor, 'address', 'Address')}
                {renderInput(executor, 'parish', 'Parish')}
              </div>
            ))}
          </section>
        );
      case 3:
        return (
          <section>
            <h2 className="text-2xl font-semibold mb-4">Funeral Arrangements</h2>
            {renderInput(null, 'funeralDetails', 'Funeral Details')}
            {renderInput(null, 'clothingDetails', 'Clothing Details')}
            {renderInput(null, 'remainsDetails', 'Remains Placement')}
            <h3 className="text-xl font-semibold mb-2">Songs</h3>
            {formData.songs.map((_, index) => (
              renderInput('songs', index, `Song ${index + 1}`, index)
            ))}
          </section>
        );
      case 4:
        return (
          <section>
            <h2 className="text-2xl font-semibold mb-4">Properties</h2>
            {formData.properties.map((_, index) => (
              <div key={`property-${index}`} className="mb-4 p-4 border rounded">
                <h3 className="text-xl font-semibold mb-2">Property {index + 1}</h3>
                {renderInput('properties', 'address', 'Address', index)}
                {renderInput('properties', 'parish', 'Parish', index)}
                {renderInput('properties', 'volume', 'Volume', index)}
                {renderInput('properties', 'folio', 'Folio', index)}
                {renderInput('properties', 'beneficiary', 'Beneficiary', index)}
              </div>
            ))}
          </section>
        );
      case 5:
        return (
          <section>
            <h2 className="text-2xl font-semibold mb-4">Shares and Stocks</h2>
            {formData.shares.map((_, index) => (
              <div key={`share-${index}`} className="mb-4 p-4 border rounded">
                <h3 className="text-xl font-semibold mb-2">Share {index + 1}</h3>
                {renderInput('shares', 'company', 'Company', index)}
                {renderInput('shares', 'country', 'Country', index)}
                {renderInput('shares', 'exchange', 'Exchange', index)}
                {renderInput('shares', 'accountNumber', 'Account Number', index)}
                {renderInput('shares', 'beneficiary', 'Beneficiary', index)}
              </div>
            ))}
          </section>
        );
      case 6:
        return (
          <section>
            <h2 className="text-2xl font-semibold mb-4">Insurance</h2>
            {formData.insurance.map((_, index) => (
              <div key={`insurance-${index}`} className="mb-4 p-4 border rounded">
                <h3 className="text-xl font-semibold mb-2">Policy {index + 1}</h3>
                {renderInput('insurance', 'policyNumber', 'Policy Number', index)}
                {renderInput('insurance', 'company', 'Company', index)}
                {renderInput('insurance', 'address', 'Address', index)}
                {renderInput('insurance', 'country', 'Country', index)}
                {renderInput('insurance', 'beneficiary', 'Beneficiary', index)}
              </div>
            ))}
          </section>
        );
      case 7:
        return (
          <section>
            <h2 className="text-2xl font-semibold mb-4">Bank Accounts</h2>
            {formData.bankAccounts.map((_, index) => (
              <div key={`bank-${index}`} className="mb-4 p-4 border rounded">
                <h3 className="text-xl font-semibold mb-2">Account {index + 1}</h3>
                {renderInput('bankAccounts', 'accountNumber', 'Account Number', index)}
                {renderInput('bankAccounts', 'bank', 'Bank Name', index)}
                {renderInput('bankAccounts', 'address', 'Address', index)}
                {renderInput('bankAccounts', 'country', 'Country', index)}
                {renderInput('bankAccounts', 'beneficiary', 'Beneficiary', index)}
              </div>
            ))}
          </section>
        );
      case 8:
        return (
          <section>
            <h2 className="text-2xl font-semibold mb-4">Motor Vehicles</h2>
            {formData.vehicles.map((_, index) => (
              <div key={`vehicle-${index}`} className="mb-4 p-4 border rounded">
                <h3 className="text-xl font-semibold mb-2">Vehicle {index + 1}</h3>
                {renderInput('vehicles', 'color', 'Color', index)}
                {renderInput('vehicles', 'make', 'Make', index)}
                {renderInput('vehicles', 'model', 'Model', index)}
                {renderInput('vehicles', 'licensePlate', 'License Plate', index)}
                {renderInput('vehicles', 'engineNumber', 'Engine Number', index)}
                {renderInput('vehicles', 'chassisNumber', 'Chassis Number', index)}
                {renderInput('vehicles', 'beneficiary', 'Beneficiary', index)}
              </div>
            ))}
          </section>
        );
      case 9:
        return (
          <section>
            <h2 className="text-2xl font-semibold mb-4">Other Bequests</h2>
            <h3 className="text-xl font-semibold mb-2">Unpaid Salary and Emoluments</h3>
            {renderInput('unpaidSalary', 'employer', 'Employer')}
            {renderInput('unpaidSalary', 'employerAddress', 'Employer Address')}
            {renderInput('unpaidSalary', 'beneficiary', 'Beneficiary')}

            <h3 className="text-xl font-semibold mb-2 mt-4">National Housing Trust (NHT) Contributions</h3>
            {renderInput('nhtContributions', 'nhtNumber', 'NHT Number')}
            {renderInput('nhtContributions', 'taxNumber', 'Tax Registration Number')}
            {renderInput('nhtContributions', 'beneficiary', 'Beneficiary')}

            <h3 className="text-xl font-semibold mb-2 mt-4">Jewellery</h3>
            {renderInput('jewellery', 'description', 'Description')}
            {renderInput('jewellery', 'beneficiary', 'Beneficiary')}

            <h3 className="text-xl font-semibold mb-2 mt-4">Furniture</h3>
            {renderInput('furniture', 'beneficiary', 'Beneficiary')}

            <h3 className="text-xl font-semibold mb-2 mt-4">Paintings</h3>
            {renderInput('paintings', 'beneficiary', 'Beneficiary')}

            <h3 className="text-xl font-semibold mb-2 mt-4">Firearm</h3>
            {renderInput('firearm', 'serialNumber', 'Serial Number')}
            {renderInput('firearm', 'licenseNumber', 'License Number')}
            {renderInput('firearm', 'beneficiary', 'Beneficiary')}
          </section>
        );
      case 10:
        return (
          <section>
            <h2 className="text-2xl font-semibold mb-4">Residual Estate</h2>
            {renderInput('residualEstate', 'beneficiaries', 'Beneficiaries (comma-separated)')}

            <h2 className="text-2xl font-semibold mb-4">Signature and Witnesses</h2>
            {renderInput(null, 'signatureDate', 'Signature Date')}
            {formData.witnesses.map((_, index) => (
              <div key={`witness-${index}`} className="mb-4 p-4 border rounded">
                <h3 className="text-xl font-semibold mb-2">Witness {index + 1}</h3>
                {renderInput('witnesses', 'name', 'Name', index)}
                {renderInput('witnesses', 'address', 'Address', index)}
                {renderInput('witnesses', 'occupation', 'Occupation', index)}
              </div>
            ))}
          </section>
        );
      default:
        return null;
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-4">Last Will and Testament Generator</h1>
      <div className="mb-8">
        <div className="flex justify-between items-center">
          {Array.from({ length: totalSteps }, (_, i) => (
            <div
              key={i}
              className={`w-8 h-8 rounded-full flex items-center justify-center ${
                i + 1 === currentStep
                  ? 'bg-blue-500 text-white'
                  : i + 1 < currentStep
                  ? 'bg-green-500 text-white'
                  : 'bg-gray-300 text-gray-600'
              }`}
            >
              {i + 1}
            </div>
          ))}
        </div>
        <div className="h-2 bg-gray-200 mt-2">
          <div
            className="h-full bg-blue-500"
            style={{ width: `${((currentStep - 1) / (totalSteps - 1)) * 100}%` }}
          ></div>
        </div>
      </div>
      <form onSubmit={handleSubmit} className="space-y-8">
        {renderStep()}
        <div className="flex justify-between mt-8">
          {currentStep > 1 && (
            <button
              type="button"
              onClick={() => setCurrentStep(currentStep - 1)}
              className="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            >
              Previous
            </button>
          )}
          {currentStep < totalSteps && (
            <button
              type="button"
              onClick={() => setCurrentStep(currentStep + 1)}
              className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            >
              Next
            </button>
          )}
          {currentStep === totalSteps && (
            <button
              type="submit"
              className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            >
              Generate Will
            </button>
          )}
        </div>
      </form>
    </div>
  );
};

export default WillGenerator;




const handleGeneratePDF = async () => {
  try {
    const pdfBytes = await generatePDF(formData);
    const blob = new Blob([pdfBytes], { type: 'application/pdf' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `Last_Will_and_Testament_${formData.testatorName || 'Document'}.pdf`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
  } catch (error) {
    console.error('Error generating PDF:', error);
    alert('Error generating PDF. Please try again.');
  }
}





const handleSubmit = async (e) => {
  e.preventDefault();
  try {
    setSubmitting(true); // Add this state if not already present
    
    // Get current user
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error('User not authenticated');

    // First save the will to get the will_id
    const { data: willData, error: willError } = await supabase
      .from('wills')
      .insert([
        {
          user_id: user.id,
          testator_name: formData.testatorName,
          prefix: formData.prefix,
          suffix: formData.suffix,
          occupation: formData.occupation,
          address: formData.address,
          parish: formData.parish,
          gender: formData.gender,
          marital_status: formData.maritalStatus,
          content: formData,
          created_at: new Date().toISOString()
        }
      ])
      .select()
      .single();

    if (willError) throw willError;

    // Save spouse if exists
    if (formData.spouse?.fullName) {
      const { error: spouseError } = await supabase
        .from('spouses')
        .insert([{
          will_id: willData.id,
          full_name: formData.spouse.fullName,
          relation: formData.spouse.relation,
          occupation: formData.spouse.occupation
        }]);
      if (spouseError) throw spouseError;
    }

    // Save children
    if (formData.children?.length > 0) {
      const { error: childrenError } = await supabase
        .from('children')
        .insert(formData.children.map(child => ({
          will_id: willData.id,
          full_name: child.fullName,
          relationship: child.relationship,
          date_of_birth: child.dateOfBirth,
          email: child.email,
          occupation: child.occupation,
          address: child.address,
          parish: child.parish
        })));
      if (childrenError) throw childrenError;
    }

    // Save grandchildren
    if (formData.grandchildren?.length > 0) {
      const { error: grandchildrenError } = await supabase
        .from('grandchildren')
        .insert(formData.grandchildren.map(grandchild => ({
          will_id: willData.id,
          full_name: grandchild.fullName,
          relationship: grandchild.relationship,
          date_of_birth: grandchild.dateOfBirth,
          email: grandchild.email,
          occupation: grandchild.occupation,
          address: grandchild.address,
          parish: grandchild.parish
        })));
      if (grandchildrenError) throw grandchildrenError;
    }

    // Save deceased family members
    if (formData.deceasedFamilyMembers?.length > 0) {
      const { error: deceasedError } = await supabase
        .from('deceased_family_members')
        .insert(formData.deceasedFamilyMembers.map(member => ({
          will_id: willData.id,
          full_name: member.fullName,
          relationship: member.relationship
        })));
      if (deceasedError) throw deceasedError;
    }

    // Save additional beneficiaries
    if (formData.additionalBeneficiaries?.length > 0) {
      const { error: beneficiariesError } = await supabase
        .from('additional_beneficiaries')
        .insert(formData.additionalBeneficiaries.map(ben => ({
          will_id: willData.id,
          type: ben.type,
          full_name: ben.fullName,
          relationship: ben.relationship,
          email: ben.email,
          address: ben.address,
          parish: ben.parish
        })));
      if (beneficiariesError) throw beneficiariesError;
    }

    // Save executors
    if (formData.executors?.length > 0) {
      const { error: executorsError } = await supabase
        .from('executors')
        .insert(formData.executors.map(exec => ({
          will_id: willData.id,
          full_name: exec.name,
          relationship: exec.relationship,
          email: exec.email,
          occupation: exec.occupation,
          address: exec.address,
          parish: exec.parish
        })));
      if (executorsError) throw executorsError;
    }

    // Save witnesses
    if (formData.witnesses?.length > 0) {
      const { error: witnessesError } = await supabase
        .from('witnesses')
        .insert(formData.witnesses.map(witness => ({
          will_id: willData.id,
          full_name: witness.name,
          email: witness.email,
          address: witness.address,
          parish: witness.parish,
          occupation: witness.occupation
        })));
      if (witnessesError) throw witnessesError;
    }

    // Save possessions and their beneficiaries
    if (formData.possessions?.length > 0) {
      for (const possession of formData.possessions) {
        // Save possession
        const { data: possessionData, error: possessionError } = await supabase
          .from('possessions')
          .insert([{
            will_id: willData.id,
            type: possession.type,
            ...possession
          }])
          .select()
          .single();

        if (possessionError) throw possessionError;

        // Save possession beneficiaries
        if (possession.beneficiaries?.length > 0) {
          const { error: benError } = await supabase
            .from('possession_beneficiaries')
            .insert(possession.beneficiaries.map(ben => ({
              possession_id: possessionData.id,
              beneficiary_type: ben.type,
              beneficiary_id: ben.id,
              share_percentage: ben.sharePercentage
            })));
          if (benError) throw benError;
        }
      }
    }

    // Save funeral arrangements
    if (formData.funeralDetails || formData.clothingDetails || formData.remainsDetails) {
      const { error: funeralError } = await supabase
        .from('funeral_arrangements')
        .insert([{
          will_id: willData.id,
          funeral_details: formData.funeralDetails,
          clothing_details: formData.clothingDetails,
          remains_details: formData.remainsDetails,
          songs: formData.songs
        }]);
      if (funeralError) throw funeralError;
    }

    // Generate and download PDF
    await handleGeneratePDF();

    // Check subscription type and redirect accordingly
    const { data: subscription } = await supabase
      .from('user_subscriptions')
      .select('subscription_type')
      .eq('user_id', user.id)
      .eq('status', 'active')
      .single();

    if (subscription?.subscription_type === 'yearly') {
      navigate('/dashboard');
    } else {
      alert('Will has been generated and saved successfully!');
    }

  } catch (error) {
    console.error('Error:', error);
    alert('Error saving will. Please try again.');
  } finally {
    setSubmitting(false);
  }
};



//update the new generate pdf code // 

const handleSubmit = async (formData) => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error('No authenticated user');

    // Save will data
    const { data: willData, error: willError } = await supabase
      .from('wills')
      .insert([
        {
          user_id: user.id,
          testator_name: formData.testatorName,
          prefix: formData.prefix,
          suffix: formData.suffix,
          occupation: formData.occupation,
          address: formData.address,
          parish: formData.parish,
          content: formData
        }
      ])
      .select()
      .single();

    if (willError) throw willError;

    // Generate PDF
    await handleGeneratePDF(formData);

    // Redirect to dashboard
    navigate('/dashboard');
  } catch (error) {
    console.error('Error saving will:', error);
    alert('Failed to save will. Please try again.');
  }
};

// Updated handleGeneratePDF function
const handleGeneratePDF = async () => {
  try {
    // Your existing PDF generation code stays the same
    const pdfBytes = await generatePDF(formData);
    
    // Create and trigger download
    const blob = new Blob([pdfBytes], { type: 'application/pdf' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `Last_Will_and_Testament_${formData.testatorName || 'Document'}.pdf`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);

    return true;
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Error generating PDF. Please try again.');
  }
};
    









// previous handle submit request // 

const handleSubmit = async (formData) => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error('No authenticated user');

    // Save will data
    const { data: willData, error: willError } = await supabase
      .from('wills')
      .insert([
        {
          user_id: user.id,
          testator_name: formData.testatorName,
          prefix: formData.prefix,
          suffix: formData.suffix,
          occupation: formData.occupation,
          address: formData.address,
          parish: formData.parish,
          content: formData
        }
      ])
      .select()
      .single();

    if (willError) throw willError;

    // Generate PDF
    await handleGeneratePDF(formData);

    // Redirect to dashboard
    navigate('/dashboard');
  } catch (error) {
    console.error('Error saving will:', error);
    alert('Failed to save will. Please try again.');
  }
};

// Updated handleGeneratePDF function
const handleGeneratePDF = async () => {
  try {
    // Your existing PDF generation code stays the same
    const pdfBytes = await generatePDF(formData);
    
    // Create and trigger download
    const blob = new Blob([pdfBytes], { type: 'application/pdf' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `Last_Will_and_Testament_${formData.testatorName || 'Document'}.pdf`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);

    return true;
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Error generating PDF. Please try again.');
  }
};
    

     












     const handleSubmit = async (formData) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('No authenticated user');
  
      // Save will data
      const { data: willData, error: willError } = await supabase
        .from('wills')
        .insert([
          {
            user_id: user.id,
            testator_name: formData.testatorName,
            prefix: formData.prefix,
            suffix: formData.suffix,
            occupation: formData.occupation,
            address: formData.address,
            parish: formData.parish,
            content: formData
          }
        ])
        .select()
        .single();
  
      if (willError) throw willError;
  
      // Generate PDF
      await handleGeneratePDF(formData);
  
      // Redirect to dashboard
      navigate('/dashboard');
    } catch (error) {
      console.error('Error saving will:', error);
      alert('Failed to save will. Please try again.');
    }
  };
  
  // Updated handleGeneratePDF function
  const handleGeneratePDF = async () => {
    try {
      // Your existing PDF generation code stays the same
      const pdfBytes = await generatePDF(formData);
      
      // Create and trigger download
      const blob = new Blob([pdfBytes], { type: 'application/pdf' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `Last_Will_and_Testament_${formData.testatorName || 'Document'}.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
  
      return true;
    } catch (error) {
      console.error('Error generating PDF:', error);
      throw new Error('Error generating PDF. Please try again.');
    }
  };
      







       const handleSubmit = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      // For subscription users
      if (isSubscriptionUser && user) {
        // Handle update if editing
        if (location.state?.isEditing) {
          const { error: updateError } = await supabase
            .from('wills')
            .update({
              testator_name: formData.testatorName,
              prefix: formData.prefix,
              suffix: formData.suffix,
              occupation: formData.occupation,
              address: formData.address,
              parish: formData.parish,
              content: formData,
              updated_at: new Date().toISOString()
            })
            .eq('id', location.state.willId);

          if (updateError) throw updateError;
          
          // Generate PDF but don't trigger download
          await handleGeneratePDF(formData, false);
          
          alert('Will updated successfully');
          navigate('/dashboard');
        } 
        // Handle new will creation
        else {
          const { data: willData, error: insertError } = await supabase
            .from('wills')
            .insert([{
              user_id: user.id,
              testator_name: formData.testatorName,
              prefix: formData.prefix,
              suffix: formData.suffix,
              occupation: formData.occupation,
              address: formData.address,
              parish: formData.parish,
              content: formData,
              created_at: new Date().toISOString()
            }])
            .select()
            .single();

          if (insertError) throw insertError;
          
          // Generate PDF but don't trigger download
          await handleGeneratePDF(formData, false);
          
          alert('Will created successfully');
          navigate('/dashboard');
        }
      }
      // For one-time users
      else {
        // Generate PDF and trigger download
        await handleGeneratePDF(formData, true);
        alert('Will generated successfully');
        // Optionally redirect to a thank you page
        navigate('/thank-you');
      }
    } catch (error) {
      console.error('Error processing will:', error);
      alert('An error occurred. Please try again.');
    }
  };

  // Updated handleGeneratePDF function
  const handleGeneratePDF = async (formData, downloadImmediately = true) => {
    try {
      // Your existing PDF generation code
      const pdfBytes = await generatePDF(formData);
      
      // Create blob
      const blob = new Blob([pdfBytes], { type: 'application/pdf' });
      
      // For immediate download (one-time users)
      if (downloadImmediately) {
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `Last_Will_and_Testament_${formData.testatorName || 'Document'}.pdf`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
      }
      // For subscription users, store PDF in Supabase storage
      else if (isSubscriptionUser) {
        const { data: { user } } = await supabase.auth.getUser();
        if (user) {
          const fileName = `${Date.now()}-${formData.testatorName}.pdf`;
          const filePath = `pdfs/${user.id}/${fileName}`;
          
          await supabase.storage
            .from('documents')
            .upload(filePath, blob);
        }
      }

      return true;
    } catch (error) {
      console.error('Error handling PDF:', error);
      throw new Error('Error processing PDF. Please try again.');
    }
  };
  



// case 20 //


case 20:
            return(
              <section className="space-y-6">
              <h2 className="text-2xl font-semibold mb-4">Generate Will</h2>
              <p>Review your information and click the button below to generate your will.</p>
              <button
                onClick={handleGeneratePDF}
                className="bg-green-500 text-white px-6 py-3 rounded hover:bg-green-600"
              >
                Generate Will PDF
              </button>
            </section>
            );




       // handleSubmit code //
  
       const handleSubmit = async (formData) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('No authenticated user');
  
      // Save will data
      const { data: willData, error: willError } = await supabase
        .from('wills')
        .insert([{
          user_id: user.id,
          testator_name: formData.testatorName,
          prefix: formData.prefix,
          suffix: formData.suffix,
          occupation: formData.occupation,
          address: formData.address,
          parish: formData.parish,
          content: formData,
          created_at: new Date().toISOString()
        }])
        .select()
        .single();
  
      if (willError) throw willError;
  
      // Navigate back to dashboard with success message
      navigate('/dashboard', { 
        state: { 
          message: 'Will created successfully!',
          willId: willData.id 
        }
      });
    } catch (error) {
      console.error('Error saving will:', error);
      alert('Failed to save will. Please try again.');
    }
  };






  const handlePreviousStep = () => {
    let prevStep = currentStep - 1;
  
    // Handle guardian section navigation
    if (currentStep === 9) {
      const minorChildren = formData.children.filter(child => 
        child.dateOfBirth && calculateAge(child.dateOfBirth) < 18
      );
      
      // Skip guardian details if no minor children or livingChildren is 'no'
      if ((minorChildren.length === 0 && formData.livingGrandchildren !== 'yes') || 
          formData.livingChildren === 'no') {
        prevStep = 7;
      }
    }
    
    // Handle possession section navigation
    else if (currentStep === 17) {
      // Go back to Add Possession step
      prevStep = 11;
    }
    // Skip possession-specific steps when going back
    else if ([12, 13, 14, 15, 16].includes(currentStep)) {
      prevStep = 11;
    }
  
    // Ensure we don't go below step 1
    setCurrentStep(Math.max(1, prevStep));
  };







  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-4">Last Will and Testament Generator</h1>
      
      {/* Progress indicator */}
      <div className="mb-8">
        <div className="flex justify-between">
          {Array.from({ length: totalSteps }, (_, i) => {
            const step = i + 1;
            // Don't show skipped steps
            if (![12, 13, 14, 15, 16].includes(step)) {
              return (
                <div
                  key={step}
                  className={`w-8 h-8 rounded-full flex items-center justify-center ${
                    step === currentStep
                      ? 'bg-blue-500 text-white'
                      : step < currentStep
                      ? 'bg-green-500 text-white'
                      : 'bg-gray-300'
                  }`}
                >
                  {step}
                </div>
              );
            }
            return null;
          })}
        </div>
      </div>

      <form onSubmit={(e) => e.preventDefault()}>
        {renderStep()}
        
        <div className="flex justify-between mt-8">
          <button
            type="button"
            onClick={handlePreviousStep}
            className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
            disabled={currentStep === 1}
          >
            Previous
          </button>
          
          <button
            type="button"
            onClick={navigateForward}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            Next
          </button>
        </div>
      </form>
    </div>
  );
};




















   case 20:
  return (
    <section className="space-y-6">
      <h2 className="text-2xl font-semibold mb-4">Generate Will</h2>
      <p className="text-gray-600">Review your information and click the button below to generate your will.</p>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
          <strong className="font-bold">Error! </strong>
          <span className="block sm:inline">{error}</span>
        </div>
      )}

      <button
        onClick={handleSubmit}
        disabled={loading}
        className={`bg-green-500 text-white px-6 py-3 rounded hover:bg-green-600 
          transition-colors ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
      >
        {loading ? 'Generating...' : 'Generate Will PDF'}
      </button>
    </section>
  );
          

         
      default:
        return null;
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-4">Last Will and Testament Generator</h1>
      
      {/* Progress indicator */}
      <div className="mb-8">
        <div className="flex justify-between">
          {Array.from({ length: totalSteps }, (_, i) => {
            const step = i + 1;
            // Don't show skipped steps
            if (![12, 13, 14, 15, 16].includes(step)) {
              return (
                <div
                  key={step}
                  className={`w-8 h-8 rounded-full flex items-center justify-center ${
                    step === currentStep
                      ? 'bg-blue-500 text-white'
                      : step < currentStep
                      ? 'bg-green-500 text-white'
                      : 'bg-gray-300'
                  }`}
                >
                  {step}
                </div>
              );
            }
            return null;
          })}
        </div>
      </div>

      <form onSubmit={(e) => e.preventDefault()}>
        {renderStep()}
        
        <div className="flex justify-between mt-8">
          <button
            type="button"
            onClick={handlePreviousStep}
            className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
            disabled={currentStep === 1}
          >
            Previous
          </button>
          
          <button
            type="button"
            onClick={navigateForward}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            Next
          </button>
        </div>
      </form>
    </div>
  );
};

export default WillGenerator;