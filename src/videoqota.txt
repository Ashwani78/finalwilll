import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Eye,
  Edit2,
  Trash2,
  Upload,
  Calendar,
  Clock,
  FileText,
  Share2,
  Plus,
  Users,
  AlertCircle,
  X,
  Download,
  Video,
  Image as ImageIcon
} from 'lucide-react';

// Constants
const MAX_FILE_SIZE = 30 * 1024 * 1024; // 30MB
const CHUNK_SIZE = 1024 * 1024; // 1MB chunks for storage

const SUPPORTED_VIDEO_FORMATS = [
  'video/mp4',
  'video/webm',
  'video/ogg',
  'video/quicktime',
  'video/x-mov',
  'video/mpeg',
  'video/x-msvideo',
  'video/x-matroska',
  'video/3gpp'
];

const SUPPORTED_IMAGE_FORMATS = ['image/jpeg', 'image/png', 'image/gif'];
const SUPPORTED_DOC_FORMATS = [
  'application/pdf',
  'application/msword',
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
];

// Utility functions for chunk storage
const storeInChunks = (key, data) => {
  const chunks = Math.ceil(data.length / CHUNK_SIZE);
  for (let i = 0; i < chunks; i++) {
    const chunk = data.slice(i * CHUNK_SIZE, (i + 1) * CHUNK_SIZE);
    localStorage.setItem(`${key}_${i}`, chunk);
  }
  localStorage.setItem(`${key}_chunks`, chunks.toString());
};

const getFromChunks = (key) => {
  const chunks = parseInt(localStorage.getItem(`${key}_chunks`) || '0');
  let data = '';
  for (let i = 0; i < chunks; i++) {
    data += localStorage.getItem(`${key}_${i}`) || '';
  }
  return data;
};

const removeChunks = (key) => {
  const chunks = parseInt(localStorage.getItem(`${key}_chunks`) || '0');
  for (let i = 0; i < chunks; i++) {
    localStorage.removeItem(`${key}_${i}`);
  }
  localStorage.removeItem(`${key}_chunks`);
};

const Dashboard = () => {
  const navigate = useNavigate();
  const [showUploadModal, setShowUploadModal] = useState(false);
  const [error, setError] = useState('');
  const [uploadProgress, setUploadProgress] = useState(0);
  const [uploadedFiles, setUploadedFiles] = useState([]);
  const [blobUrls, setBlobUrls] = useState({});

  const willsList = [
    {
      id: 1,
      name: "My Will",
      status: "Draft",
      created: new Date().toLocaleDateString()
    }
  ];

  // Load files and create blob URLs on mount
  useEffect(() => {
    const loadFiles = async () => {
      try {
        const filesList = localStorage.getItem('filesList');
        if (filesList) {
          const files = JSON.parse(filesList);
          const newBlobUrls = {};

          // Load each file's data and create blob URLs for videos
          const loadedFiles = await Promise.all(
            files.map(async (file) => {
              const fileData = getFromChunks(`file_${file.id}`);
              if (file.type.startsWith('video/')) {
                try {
                  const base64Response = fileData;
                  const byteCharacters = atob(base64Response.split(',')[1]);
                  const byteNumbers = new Array(byteCharacters.length);
                  for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                  }
                  const byteArray = new Uint8Array(byteNumbers);
                  const blob = new Blob([byteArray], { type: file.type });
                  newBlobUrls[file.id] = URL.createObjectURL(blob);
                } catch (error) {
                  console.error('Error creating blob URL:', error);
                }
              }
              return { ...file, base64Data: fileData };
            })
          );

          setBlobUrls(newBlobUrls);
          setUploadedFiles(loadedFiles);
        }
      } catch (error) {
        console.error('Error loading files:', error);
        setError('Error loading saved files');
      }
    };

    loadFiles();

    return () => {
      // Cleanup blob URLs
      Object.values(blobUrls).forEach(url => URL.revokeObjectURL(url));
    };
  }, []);

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const isValidFileType = (file) => {
    return [...SUPPORTED_VIDEO_FORMATS, ...SUPPORTED_IMAGE_FORMATS, ...SUPPORTED_DOC_FORMATS].includes(file.type);
  };

  const generateVideoThumbnail = async (file) => {
    return new Promise((resolve, reject) => {
      try {
        const video = document.createElement('video');
        video.preload = 'metadata';
        
        video.onloadedmetadata = () => {
          video.currentTime = 1;
        };

        video.onseeked = () => {
          try {
            const canvas = document.createElement('canvas');
            canvas.width = 320;
            canvas.height = 180;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            const thumbnailUrl = canvas.toDataURL('image/jpeg', 0.7);
            URL.revokeObjectURL(video.src);
            resolve(thumbnailUrl);
          } catch (error) {
            reject(error);
          }
        };

        video.onerror = () => {
          URL.revokeObjectURL(video.src);
          reject(new Error('Error generating video thumbnail'));
        };

        video.src = URL.createObjectURL(file);
      } catch (error) {
        reject(error);
      }
    });
  };

  const handleFileChange = async (event) => {
    const files = Array.from(event.target.files);
    setError('');
    setUploadProgress(0);

    for (const file of files) {
      try {
        if (file.size > MAX_FILE_SIZE) {
          setError(`${file.name} exceeds 30MB limit`);
          continue;
        }

        if (!isValidFileType(file)) {
          setError(`${file.name} has unsupported format`);
          continue;
        }

        const fileId = `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const reader = new FileReader();

        reader.onprogress = (e) => {
          if (e.lengthComputable) {
            const progress = (e.loaded / e.total) * 100;
            setUploadProgress(Math.round(progress));
          }
        };

        reader.onloadend = async () => {
          const base64Data = reader.result;
          const newFile = {
            id: fileId,
            name: file.name,
            type: file.type,
            size: file.size,
            uploadDate: new Date().toISOString()
          };

          if (file.type.startsWith('video/')) {
            try {
              const thumbnail = await generateVideoThumbnail(file);
              newFile.thumbnail = thumbnail;
              
              // Create blob URL for immediate display
              const blob = await (await fetch(base64Data)).blob();
              const blobUrl = URL.createObjectURL(blob);
              setBlobUrls(prev => ({ ...prev, [fileId]: blobUrl }));
            } catch (error) {
              console.error('Error processing video:', error);
              setError('Error processing video file');
              return;
            }
          }

          try {
            // Store file data in chunks
            storeInChunks(`file_${fileId}`, base64Data);

            // Update files list
            setUploadedFiles(prevFiles => {
              const updatedFiles = [...prevFiles, { ...newFile, base64Data }];
              localStorage.setItem('filesList', JSON.stringify(
                updatedFiles.map(f => ({
                  id: f.id,
                  name: f.name,
                  type: f.type,
                  size: f.size,
                  uploadDate: f.uploadDate,
                  thumbnail: f.thumbnail
                }))
              ));
              return updatedFiles;
            });
          } catch (error) {
            console.error('Storage error:', error);
            setError('Storage quota exceeded. Please delete some files.');
          }
        };

        reader.onerror = () => {
          setError(`Error reading file: ${file.name}`);
        };

        reader.readAsDataURL(file);
      } catch (error) {
        console.error('Upload error:', error);
        setError(`Error uploading ${file.name}`);
      }
    }
  };

  const handleDeleteFile = (fileId) => {
    if (window.confirm('Are you sure you want to delete this file?')) {
      // Revoke blob URL if exists
      if (blobUrls[fileId]) {
        URL.revokeObjectURL(blobUrls[fileId]);
        setBlobUrls(prev => {
          const updated = { ...prev };
          delete updated[fileId];
          return updated;
        });
      }

      // Remove file chunks from storage
      removeChunks(`file_${fileId}`);

      // Update files list
      setUploadedFiles(prevFiles => {
        const updatedFiles = prevFiles.filter(file => file.id !== fileId);
        localStorage.setItem('filesList', JSON.stringify(
          updatedFiles.map(f => ({
            id: f.id,
            name: f.name,
            type: f.type,
            size: f.size,
            uploadDate: f.uploadDate,
            thumbnail: f.thumbnail
          }))
        ));
        return updatedFiles;
      });
    }
  };

  const handleDownload = async (file) => {
    try {
      let downloadUrl;
      const fileData = file.base64Data || getFromChunks(`file_${file.id}`);

      if (file.type.startsWith('video/')) {
        const base64Response = fileData;
        const byteCharacters = atob(base64Response.split(',')[1]);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
          byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: file.type });
        downloadUrl = URL.createObjectURL(blob);
      } else {
        downloadUrl = fileData;
      }

      const link = document.createElement('a');
      link.href = downloadUrl;
      link.download = file.name;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      if (file.type.startsWith('video/')) {
        URL.revokeObjectURL(downloadUrl);
      }
    } catch (error) {
      console.error('Download error:', error);
      setError(`Error downloading ${file.name}`);
    }
  };

  const UploadModal = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">Upload Files</h2>
          <button 
            onClick={() => setShowUploadModal(false)}
            className="text-gray-500 hover:text-gray-700"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        {error && (
          <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-lg flex items-center">
            <AlertCircle className="w-5 h-5 mr-2" />
            <p>{error}</p>
          </div>
        )}

        <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
          <input
            type="file"
            onChange={handleFileChange}
            accept={[...SUPPORTED_VIDEO_FORMATS, ...SUPPORTED_IMAGE_FORMATS, ...SUPPORTED_DOC_FORMATS].join(',')}
            className="hidden"
            id="fileInput"
            multiple
          />
          <label 
            htmlFor="fileInput"
            className="cursor-pointer flex flex-col items-center"
          >
            <Upload className="w-12 h-12 text-blue-500 mb-2" />
            <p className="text-gray-600">Click to upload or drag and drop</p>
            <p className="text-sm text-gray-500 mt-1">
              Max file size: 30MB
            </p>
          </label>
        </div>

        {uploadProgress > 0 && uploadProgress < 100 && (
          <div className="mt-4">
            <div className="h-2 bg-gray-200 rounded-full">
              <div 
                className="h-2 bg-blue-500 rounded-full transition-all duration-300"
                style={{ width: `${uploadProgress}%` }}
              />
            </div>
            <p className="text-sm text-gray-500 text-center mt-2">
              Uploading: {uploadProgress}%
            </p>
          </div>
        )}
      </div>
    </div>
  );

  const DocumentPreview = () => {
    if (uploadedFiles.length === 0) {
      return (
        <div className="text-center py-8 bg-gray-50 rounded-lg mt-4">
          <p className="text-gray-600">No files uploaded yet</p>
        </div>
      );
    }

    return (
      <div className="mt-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {uploadedFiles.map(file => (
          <div key={file.id} className="border rounded-lg p-4 bg-white shadow-sm">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center">
                {file.type.startsWith('video/') ? (
                  <Video className="w-5 h-5 text-blue-500 mr-2" />
                ) : file.type.startsWith('image/') ? (
                  <ImageIcon className="w-5 h-5 text-blue-500 mr-2" />
                ) : (
                  <FileText className="w-5 h-5 text-blue-500 mr-2" />
                )}
                <span className="font-medium truncate" title={file.name}>
                  {file.name}
                </span>
              </div>
              <button
                onClick={() => handleDeleteFile(file.id)}
                className="text-red-500 hover:text-red-700"
                title="Delete file"
              >
                <Trash2 className="w-4 h-4" />
              </button>
            </div>
            
            <div className="text-sm text-gray-500 mb-2">
              Uploaded: {new Date(file.uploadDate).toLocaleDateString()}
            </div>

            {file.type.startsWith('video/') ? (
              <div>
                <video 
                  controls 
                  className="w-full h-32 object-cover rounded my-2"
                  src={blobUrls[file.id]}
                  poster={file.thumbnail}
                >
                  Your browser does not support the video tag.
                </video>
                <p className="text-sm text-gray-500">
                  Size: {formatFileSize(file.size)}
                </p>
              </div>
            ) : file.type.startsWith('image/') && (
              <img 
                src={file.base64Data} 
                alt={file.name}
                className="w-full h-32 object-cover rounded my-2"
              />
            )}

            <div className="flex justify-end mt-2">
              <button
                onClick={() => handleDownload(file)}
                className="text-blue-500 hover:text-blue-700 flex items-center"
              >
                <Download className="w-4 h-4 mr-1" />
                <span>Download</span>
              </button>
            </div>
          </div>
        ))}
      </div>
    );
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Your Wills Dashboard</h1>
          <p className="text-gray-600">Manage and organize your legal documents</p>
        </div>
        <button
          onClick={() => { location.href="/form" }}
          className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
        >
          <Plus className="w-5 h-5" />
          Create New Will
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {willsList.map((will) => (
          <div key={will.id} className="bg-white rounded-lg shadow-md p-6 space-y-4">
            <div className="flex justify-between items-start">
              <div>
                <h3 className="text-lg font-semibold text-gray-900">{will.name}</h3>
                <p className="text-sm text-gray-500">Created: {will.created}</p>
              </div>
              <span className={`px-2 py-1 rounded-full text-xs ${
                will.status === 'Final' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
              }`}>
                {will.status}
              </span>
            </div>

            <div className="flex flex-wrap gap-2 pt-4 border-t">
              <button className="flex items-center gap-1 px-3 py-1.5 text-gray-600 bg-gray-100 rounded-md hover:bg-gray-200">
                <Eye className="w-4 h-4" />
                <span>View</span>
              </button>

              <button
                onClick={() => { location.href="/form" }}
                className="flex items-center gap-1 px-3 py-1.5 text-blue-600 bg-blue-100 rounded-md hover:bg-blue-200"
              >
                <Edit2 className="w-4 h-4" />
                <span>Edit</span>
              </button>

              <button className="flex items-center gap-1 px-3 py-1.5 text-red-600 bg-red-100 rounded-md hover:bg-red-200">
                <Trash2 className="w-4 h-4" />
                <span>Delete</span>
              </button>

              <button
                onClick={() => setShowUploadModal(true)}
                className="flex items-center gap-1 px-3 py-1.5 text-green-600 bg-green-100 rounded-md hover:bg-green-200"
              >
                <Upload className="w-4 h-4" />
                <span>Upload</span>
              </button>

              <button
                onClick={() => {
                  window.Calendly && window.Calendly.initPopupWidget({
                    url: 'https://calendly.com/manat-brainquest/30min'
                  });
                }}
                className="flex items-center gap-1 px-3 py-1.5 text-purple-600 bg-purple-100 rounded-md hover:bg-purple-200"
              >
                <Calendar className="w-4 h-4" />
                <span>Schedule</span>
              </button>
            </div>
          </div>
        ))}
      </div>

      {/* Document Preview Section */}
      <div className="mt-8">
        <h2 className="text-xl font-semibold mb-4">Uploaded Files</h2>
        <DocumentPreview />
      </div>

      {/* Upload Modal */}
      {showUploadModal && <UploadModal />}
    </div>
  );
};

export default Dashboard;