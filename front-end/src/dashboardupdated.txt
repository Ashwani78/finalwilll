import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Eye,
  Edit2,
  Trash2,
  Upload,
  Calendar,
  Clock,
  FileText,
  Share2,
  Plus,
  Users,
  AlertCircle,
  X,
  Download
} from 'lucide-react';

const Dashboard = () => {
  const navigate = useNavigate();
  const [showUploadModal, setShowUploadModal] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState(() => {
    const saved = localStorage.getItem('uploadedFiles');
    return saved ? JSON.parse(saved) : [];
  });

  // Calendly script
  useEffect(() => {
    const script = document.createElement('script');
    script.src = 'https://assets.calendly.com/assets/external/widget.js';
    script.async = true;
    document.body.appendChild(script);

    return () => {
      document.body.removeChild(script);
    };
  }, []);

  const openCalendly = () => {
    Calendly.initPopupWidget({
      url: 'https://calendly.com/manat-brainquest/30min'
    });
  };

  const willsList = [
    {
      id: 1,
      name: "My Will",
      status: "Draft",
      created: "2024-03-21"
    }
  ];

  // File upload handling
  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        const newFile = {
          id: Date.now(),
          name: file.name,
          type: file.type,
          size: file.size,
          content: reader.result,
          uploadDate: new Date().toISOString()
        };

        setUploadedFiles(prevFiles => {
          const updatedFiles = [...prevFiles, newFile];
          localStorage.setItem('uploadedFiles', JSON.stringify(updatedFiles));
          return updatedFiles;
        });
      };
      reader.readAsDataURL(file);
    }
  };

  // Delete file
  const handleDeleteFile = (fileId) => {
    if (window.confirm('Are you sure you want to delete this file?')) {
      setUploadedFiles(prevFiles => {
        const updatedFiles = prevFiles.filter(file => file.id !== fileId);
        localStorage.setItem('uploadedFiles', JSON.stringify(updatedFiles));
        return updatedFiles;
      });
    }
  };

  // Upload Modal
  const UploadModal = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">Upload Documents</h2>
          <button 
            onClick={() => setShowUploadModal(false)}
            className="text-gray-500 hover:text-gray-700"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
          <input
            type="file"
            onChange={handleFileChange}
            accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
            className="hidden"
            id="fileInput"
          />
          <label 
            htmlFor="fileInput"
            className="cursor-pointer flex flex-col items-center"
          >
            <Upload className="w-12 h-12 text-blue-500 mb-2" />
            <p className="text-gray-600">Click to upload or drag and drop</p>
            <p className="text-sm text-gray-500 mt-1">
              Supported files: PDF, DOC, DOCX, JPG, PNG
            </p>
          </label>
        </div>
      </div>
    </div>
  );

  // Document Preview Section
  const DocumentPreview = () => {
    if (uploadedFiles.length === 0) {
      return (
        <div className="text-center py-8 bg-gray-50 rounded-lg mt-4">
          <p className="text-gray-600">No documents uploaded yet</p>
        </div>
      );
    }

    return (
      <div className="mt-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {uploadedFiles.map(file => (
          <div key={file.id} className="border rounded-lg p-4 bg-white shadow-sm">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center">
                <FileText className="w-5 h-5 text-blue-500 mr-2" />
                <span className="font-medium truncate" title={file.name}>
                  {file.name}
                </span>
              </div>
              <button
                onClick={() => handleDeleteFile(file.id)}
                className="text-red-500 hover:text-red-700"
                title="Delete file"
              >
                <Trash2 className="w-4 h-4" />
              </button>
            </div>
            
            <div className="text-sm text-gray-500 mb-2">
              Uploaded: {new Date(file.uploadDate).toLocaleDateString()}
            </div>

            {file.type.startsWith('image/') && (
              <img 
                src={file.content} 
                alt={file.name}
                className="w-full h-32 object-cover rounded my-2"
              />
            )}

            <div className="flex justify-end">
              <a
                href={file.content}
                download={file.name}
                className="text-blue-500 hover:text-blue-700 flex items-center"
              >
                <Download className="w-4 h-4 mr-1" />
                <span>Download</span>
              </a>
            </div>
          </div>
        ))}
      </div>
    );
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Your Wills Dashboard</h1>
          <p className="text-gray-600">Manage and organize your legal documents</p>
        </div>
        <button
          onClick={() => { location.href="/form" }}
          className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
        >
          <Plus className="w-5 h-5" />
          Create New Will
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {willsList.map((will) => (
          <div key={will.id} className="bg-white rounded-lg shadow-md p-6 space-y-4">
            <div className="flex justify-between items-start">
              <div>
                <h3 className="text-lg font-semibold text-gray-900">{will.name}</h3>
                <p className="text-sm text-gray-500">Created: {will.created}</p>
              </div>
              <span className={`px-2 py-1 rounded-full text-xs ${
                will.status === 'Final' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
              }`}>
                {will.status}
              </span>
            </div>

            <div className="flex flex-wrap gap-2 pt-4 border-t">
              <button className="flex items-center gap-1 px-3 py-1.5 text-gray-600 bg-gray-100 rounded-md hover:bg-gray-200">
                <Eye className="w-4 h-4" />
                <span>View</span>
              </button>

              <button
                onClick={() => { location.href="/form" }}
                className="flex items-center gap-1 px-3 py-1.5 text-blue-600 bg-blue-100 rounded-md hover:bg-blue-200"
              >
                <Edit2 className="w-4 h-4" />
                <span>Edit</span>
              </button>

              <button className="flex items-center gap-1 px-3 py-1.5 text-red-600 bg-red-100 rounded-md hover:bg-red-200">
                <Trash2 className="w-4 h-4" />
                <span>Delete</span>
              </button>

              <button
                onClick={() => setShowUploadModal(true)}
                className="flex items-center gap-1 px-3 py-1.5 text-green-600 bg-green-100 rounded-md hover:bg-green-200"
              >
                <Upload className="w-4 h-4" />
                <span>Upload</span>
              </button>

              <button
                onClick={openCalendly}
                className="flex items-center gap-1 px-3 py-1.5 text-purple-600 bg-purple-100 rounded-md hover:bg-purple-200"
              >
                <Calendar className="w-4 h-4" />
                <span>Schedule</span>
              </button>
            </div>
          </div>
        ))}
      </div>

      {/* Document Preview Section */}
      <div className="mt-8">
        <h2 className="text-xl font-semibold mb-4">Uploaded Documents</h2>
        <DocumentPreview />
      </div>

      {/* Upload Modal */}
      {showUploadModal && <UploadModal />}
    </div>
  );
};

export default Dashboard;