// src/Dashboard.jsx

import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { Eye, Pencil, Trash2, Upload, Link, X, Loader } from 'lucide-react';
import { fetchWillsFromSupabase, deleteWillFromSupabase } from './willOperations';
import { uploadDocument, downloadDocument } from './documentOperations';

const Dashboard = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const [wills, setWills] = useState([]);
  const [loading, setLoading] = useState(true);
  const [viewModalWill, setViewModalWill] = useState(null);
  const [uploadModalWill, setUploadModalWill] = useState(null);
  const [selectedFile, setSelectedFile] = useState(null);
  const [uploading, setUploading] = useState(false);

  useEffect(() => {
    fetchWills();
  }, []);

  const fetchWills = async () => {
    setLoading(true);
    try {
      const result = await fetchWillsFromSupabase();
      if (result.success) {
        setWills(result.wills);
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Error fetching wills:', error);
      alert('Failed to load wills. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateWill = () => {
    navigate('/form');
  };

  const handleEdit = (will) => {
    navigate('/form', { state: { editingWill: will } });
  };

  const handleDelete = async (willId) => {
    if (!confirm('Are you sure you want to delete this will?')) return;

    try {
      const result = await deleteWillFromSupabase(willId);
      if (result.success) {
        setWills(wills.filter(w => w.id !== willId));
        alert('Will deleted successfully');
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Error deleting will:', error);
      alert('Failed to delete will. Please try again.');
    }
  };

  const handleView = (will) => {
    setViewModalWill(will);
  };

  const handleUpload = (will) => {
    setUploadModalWill(will);
    setSelectedFile(null);
  };

  const handleFileSelect = (event) => {
    setSelectedFile(event.target.files[0]);
  };

  const handleUploadSubmit = async () => {
    if (!selectedFile || !uploadModalWill) return;

    try {
      setUploading(true);
      const result = await uploadDocument(uploadModalWill.id, selectedFile);
      
      if (!result.success) {
        throw new Error(result.error);
      }

      await fetchWills(); // Refresh wills data
      setUploadModalWill(null);
      setSelectedFile(null);
      alert('Document uploaded successfully');
    } catch (error) {
      console.error('Upload error:', error);
      alert('Failed to upload document. Please try again.');
    } finally {
      setUploading(false);
    }
  };

  const handleDownload = async (document) => {
    try {
      const result = await downloadDocument(document.file_path, document.name);
      if (!result.success) {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Download error:', error);
      alert('Failed to download document. Please try again.');
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Loader className="animate-spin h-8 w-8 text-blue-500" />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8 px-4">
      <div className="max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-2xl font-bold">Your Wills Dashboard</h1>
            <p className="text-gray-600">Manage and organize your legal documents</p>
          </div>
          <button
            onClick={handleCreateWill}
            className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2"
          >
            + Create New Will
          </button>
        </div>

        {wills.length === 0 ? (
          <div className="text-center py-12 bg-white rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-4">No Wills Created Yet</h2>
            <p className="text-gray-600 mb-6">
              Start by creating your first will using our easy-to-use generator.
            </p>
            <button
              onClick={handleCreateWill}
              className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700"
            >
              Create Your First Will
            </button>
          </div>
        ) : (
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {wills.map((will) => (
              <div key={will.id} className="bg-white p-6 rounded-lg shadow-sm">
                <h3 className="text-xl font-semibold mb-2">{will.testator_name}'s Will</h3>
                <p className="text-gray-600 mb-2">
                  Created: {new Date(will.created_at).toLocaleDateString()}
                </p>
                <p className="text-sm text-gray-600 mb-4">
                  Documents: {will.documents?.length || 0}
                </p>

                <div className="grid grid-cols-2 gap-2 mb-4">
                  <button
                    onClick={() => handleView(will)}
                    className="flex items-center justify-center gap-2 px-3 py-2 bg-gray-100 text-gray-700 rounded hover:bg-gray-200"
                  >
                    <Eye size={16} /> View
                  </button>
                  <button
                    onClick={() => handleEdit(will)}
                    className="flex items-center justify-center gap-2 px-3 py-2 bg-blue-100 text-blue-700 rounded hover:bg-blue-200"
                  >
                    <Pencil size={16} /> Edit
                  </button>
                  <button
                    onClick={() => handleDelete(will.id)}
                    className="flex items-center justify-center gap-2 px-3 py-2 bg-red-100 text-red-700 rounded hover:bg-red-200"
                  >
                    <Trash2 size={16} /> Delete
                  </button>
                  <button
                    onClick={() => handleUpload(will)}
                    className="flex items-center justify-center gap-2 px-3 py-2 bg-green-100 text-green-700 rounded hover:bg-green-200"
                  >
                    <Upload size={16} /> Upload
                  </button>
                </div>

                <button
                  onClick={() => handleSchedule(will)}
                  className="w-full flex items-center justify-center gap-2 px-3 py-2 bg-purple-100 text-purple-700 rounded hover:bg-purple-200"
                >
                  <Link size={16} /> Schedule
                </button>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* View Modal */}
      {viewModalWill && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-bold">{viewModalWill.testator_name}'s Will</h2>
              <button
                onClick={() => setViewModalWill(null)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X size={24} />
              </button>
            </div>

            <div className="space-y-6">
              <div>
                <h3 className="font-semibold text-lg mb-2">Personal Information</h3>
                <div className="grid grid-cols-2 gap-4">
                  <p><span className="font-medium">Name:</span> {viewModalWill.testator_name}</p>
                  <p><span className="font-medium">Occupation:</span> {viewModalWill.occupation}</p>
                  <p><span className="font-medium">Address:</span> {viewModalWill.address}</p>
                  <p><span className="font-medium">Parish:</span> {viewModalWill.parish}</p>
                </div>
              </div>

              <div>
                <h3 className="font-semibold text-lg mb-2">Documents</h3>
                {viewModalWill.documents?.length > 0 ? (
                  <div className="space-y-2">
                    {viewModalWill.documents.map((doc) => (
                      <div key={doc.id} className="flex items-center justify-between bg-gray-50 p-3 rounded">
                        <span>{doc.name}</span>
                        <button
                          onClick={() => handleDownload(doc)}
                          className="text-blue-600 hover:text-blue-700 flex items-center gap-2"
                        >
                          <Upload className="rotate-180" size={16} />
                          Download
                        </button>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-gray-500">No documents uploaded yet</p>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Upload Modal */}
      {uploadModalWill && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">Upload Document</h2>
              <button
                onClick={() => setUploadModalWill(null)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X size={24} />
              </button>
            </div>

            <div className="space-y-4">
              <p>Upload a document for {uploadModalWill.testator_name}'s will</p>
              
              <input
                type="file"
                onChange={handleFileSelect}
                className="w-full border p-2 rounded"
                disabled={uploading}
              />

              <div className="flex justify-end gap-2">
                <button
                  onClick={() => setUploadModalWill(null)}
                  className="px-4 py-2 text-gray-600 hover:text-gray-700"
                  disabled={uploading}
                >
                  Cancel
                </button>
                <button
                  onClick={handleUploadSubmit}
                  disabled={!selectedFile || uploading}
                  className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50"
                >
                  {uploading ? (
                    <>
                      <Loader className="animate-spin" size={16} />
                      Uploading...
                    </>
                  ) : (
                    <>
                      <Upload size={16} />
                      Upload
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Dashboard;














import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from './supabaseClient';

const Dashboard = () => {
  const navigate = useNavigate();
  const [wills, setWills] = useState([]);
  const [loading, setLoading] = useState(true);
  const [userEmail, setUserEmail] = useState('');

  // Subscription check function
  const checkSubscription = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return null;

      const { data: profile, error } = await supabase
        .from('profiles')
        .select('subscription_type, subscription_end')
        .eq('id', user.id)
        .single();
      
      if (error) throw error;
      
      if (profile.subscription_type === 'yearly' && 
          profile.subscription_end && 
          new Date(profile.subscription_end) < new Date()) {
        return 'expired';
      }
      
      return profile.subscription_type;
    } catch (error) {
      console.error('Error checking subscription:', error);
      return null;
    }
  };

  useEffect(() => {
    const checkAccess = async () => {
      try {
        const status = await checkSubscription();
        if (status !== 'yearly') {
          navigate('/subscription');
          return;
        }
        await fetchUserAndWills();
      } catch (error) {
        console.error('Error checking access:', error);
        navigate('/subscription');
      }
    };

    checkAccess();
  }, [navigate]);

  const fetchUserAndWills = async () => {
    try {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError) throw userError;
      
      if (!user) {
        navigate('/login');
        return;
      }

      setUserEmail(user.email);

      const { data: willsData, error: willsError } = await supabase
        .from('wills')
        .select(`
          id,
          testator_name,
          content,
          created_at,
          documents (
            id,
            name,
            file_path,
            created_at
          )
        `)
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (willsError) throw willsError;
      setWills(willsData || []);
    } catch (error) {
      console.error('Error fetching data:', error);
      alert('Error loading dashboard data');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateNew = async () => {
    try {
      const status = await checkSubscription();
      if (status !== 'yearly') {
        navigate('/subscription');
        return;
      }
      navigate('/form', { 
        state: { 
          isNew: true,
          userEmail 
        } 
      });
    } catch (error) {
      console.error('Error creating new will:', error);
      alert('Error accessing will generator');
    }
  };

  const handleView = async (will) => {
    try {
      const status = await checkSubscription();
      if (status !== 'yearly') {
        navigate('/subscription');
        return;
      }
      // Implement your PDF viewing logic here
      alert('Viewing will...');
    } catch (error) {
      console.error('Error viewing will:', error);
      alert('Error viewing will');
    }
  };

  const handleEdit = async (will) => {
    try {
      const status = await checkSubscription();
      if (status !== 'yearly') {
        navigate('/subscription');
        return;
      }
      navigate('/will-generator', { 
        state: { 
          isEditing: true,
          willData: will.content,
          willId: will.id,
          userEmail
        } 
      });
    } catch (error) {
      console.error('Error editing will:', error);
      alert('Error accessing edit function');
    }
  };

  const handleDelete = async (willId) => {
    try {
      const status = await checkSubscription();
      if (status !== 'yearly') {
        navigate('/subscription');
        return;
      }

      if (!window.confirm('Are you sure you want to delete this will?')) return;

      const { data: documents } = await supabase
        .from('documents')
        .select('file_path')
        .eq('will_id', willId);

      if (documents?.length > 0) {
        await supabase.storage
          .from('documents')
          .remove(documents.map(doc => doc.file_path));
      }

      const { error } = await supabase
        .from('wills')
        .delete()
        .eq('id', willId);

      if (error) throw error;

      setWills(prev => prev.filter(w => w.id !== willId));
      alert('Will deleted successfully');
    } catch (error) {
      console.error('Error deleting will:', error);
      alert('Error deleting will');
    }
  };

  const handleUpload = async (willId, file) => {
    try {
      const status = await checkSubscription();
      if (status !== 'yearly') {
        navigate('/subscription');
        return;
      }

      const fileExt = file.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;
      const filePath = `${willId}/${fileName}`;

      const { error: uploadError } = await supabase.storage
        .from('documents')
        .upload(filePath, file);

      if (uploadError) throw uploadError;

      const { error: dbError } = await supabase
        .from('documents')
        .insert([{
          will_id: willId,
          name: file.name,
          file_path: filePath
        }]);

      if (dbError) throw dbError;

      await fetchUserAndWills();
      alert('Document uploaded successfully');
    } catch (error) {
      console.error('Error uploading document:', error);
      alert('Error uploading document');
    }
  };

  const handleSchedule = async (will) => {
    try {
      const status = await checkSubscription();
      if (status !== 'yearly') {
        navigate('/subscription');
        return;
      }
      alert('Scheduling feature coming soon...');
    } catch (error) {
      console.error('Error scheduling:', error);
      alert('Error accessing scheduling feature');
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="text-xl">Loading...</div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-6">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-2xl font-bold">Your Wills Dashboard</h1>
          <p className="text-gray-600">Manage and organize your legal documents</p>
        </div>
        <div className="flex items-center gap-4">
          <span className="text-gray-600">{userEmail}</span>
          <button
            onClick={handleCreateNew}
            className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700"
          >
            Create New Will
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {wills.map((will) => (
          <div key={will.id} className="bg-white rounded-lg shadow p-6">
            <h3 className="text-xl font-semibold">{will.testator_name}'s Will</h3>
            <p className="text-gray-600 text-sm">
              Created: {new Date(will.created_at).toLocaleDateString()}
            </p>
            <p className="text-sm text-gray-600 mb-4">
              Documents: {will.documents?.length || 0}
            </p>

            <div className="grid grid-cols-2 gap-2 mb-4">
              <button
                onClick={() => handleView(will)}
                className="px-4 py-2 bg-gray-100 text-gray-700 rounded hover:bg-gray-200"
              >
                View
              </button>
              <button
                onClick={() => handleEdit(will)}
                className="px-4 py-2 bg-blue-100 text-blue-700 rounded hover:bg-blue-200"
              >
                Edit
              </button>
              <button
                onClick={() => handleDelete(will.id)}
                className="px-4 py-2 bg-red-100 text-red-700 rounded hover:bg-red-200"
              >
                Delete
              </button>
              <label className="px-4 py-2 bg-green-100 text-green-700 rounded hover:bg-green-200 text-center cursor-pointer">
                Upload
                <input
                  type="file"
                  className="hidden"
                  onChange={(e) => {
                    if (e.target.files?.[0]) {
                      handleUpload(will.id, e.target.files[0]);
                    }
                  }}
                />
              </label>
            </div>

            <button
              onClick={() => handleSchedule(will)}
              className="w-full px-4 py-2 bg-purple-100 text-purple-700 rounded hover:bg-purple-200"
            >
              Schedule
            </button>

            {will.documents?.length > 0 && (
              <div className="mt-4">
                <h4 className="font-semibold mb-2">Uploaded Documents</h4>
                <div className="space-y-2">
                  {will.documents.map((doc) => (
                    <div key={doc.id} className="flex justify-between items-center bg-gray-50 p-2 rounded text-sm">
                      <span className="truncate">{doc.name}</span>
                      <span>{new Date(doc.created_at).toLocaleDateString()}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))}
      </div>

      {wills.length === 0 && (
        <div className="text-center py-12">
          <p className="text-gray-600">No wills created yet. Click "Create New Will" to get started.</p>
        </div>
      )}
    </div>
  );
};

export default Dashboard;








import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from './supabaseClient';

const Dashboard = () => {
  const navigate = useNavigate();
  const [wills, setWills] = useState([]);
  const [loading, setLoading] = useState(true);
  const [userEmail, setUserEmail] = useState('');

  // Subscription check function
  const checkSubscription = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return null;

      const { data: profile, error } = await supabase
        .from('profiles')
        .select('subscription_type, subscription_end')
        .eq('id', user.id)
        .single();
      
      if (error) throw error;
      
      if (profile.subscription_type === 'yearly' && 
          profile.subscription_end && 
          new Date(profile.subscription_end) < new Date()) {
        return 'expired';
      }
      
      return profile.subscription_type;
    } catch (error) {
      console.error('Error checking subscription:', error);
      return null;
    }
  };

  useEffect(() => {
    const checkAccess = async () => {
      try {
        const status = await checkSubscription();
        if (status !== 'yearly') {
          navigate('/subscription');
          return;
        }
        await fetchUserAndWills();
      } catch (error) {
        console.error('Error checking access:', error);
        navigate('/subscription');
      }
    };

    checkAccess();
  }, [navigate]);

  const fetchUserAndWills = async () => {
    try {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError) throw userError;
      
      if (!user) {
        navigate('/login');
        return;
      }

      setUserEmail(user.email);

      const { data: willsData, error: willsError } = await supabase
        .from('wills')
        .select(`
          id,
          testator_name,
          content,
          created_at,
          documents (
            id,
            name,
            file_path,
            created_at
          )
        `)
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (willsError) throw willsError;
      setWills(willsData || []);
    } catch (error) {
      console.error('Error fetching data:', error);
      alert('Error loading dashboard data');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateNew = async () => {
    try {
      const status = await checkSubscription();
      if (status !== 'yearly') {
        navigate('/subscription');
        return;
      }
      navigate('/form', { 
        state: { 
          isNew: true,
          userEmail 
        } 
      });
    } catch (error) {
      console.error('Error creating new will:', error);
      alert('Error accessing will generator');
    }
  };

  const handleView = async (will) => {
    try {
      const status = await checkSubscription();
      if (status !== 'yearly') {
        navigate('/subscription');
        return;
      }
      // Implement your PDF viewing logic here
      alert('Viewing will...');
    } catch (error) {
      console.error('Error viewing will:', error);
      alert('Error viewing will');
    }
  };

  const handleEdit = async (will) => {
    try {
      const status = await checkSubscription();
      if (status !== 'yearly') {
        navigate('/subscription');
        return;
      }
      navigate('/will-generator', { 
        state: { 
          isEditing: true,
          willData: will.content,
          willId: will.id,
          userEmail
        } 
      });
    } catch (error) {
      console.error('Error editing will:', error);
      alert('Error accessing edit function');
    }
  };

  const handleDelete = async (willId) => {
    try {
      const status = await checkSubscription();
      if (status !== 'yearly') {
        navigate('/subscription');
        return;
      }

      if (!window.confirm('Are you sure you want to delete this will?')) return;

      const { data: documents } = await supabase
        .from('documents')
        .select('file_path')
        .eq('will_id', willId);

      if (documents?.length > 0) {
        await supabase.storage
          .from('documents')
          .remove(documents.map(doc => doc.file_path));
      }

      const { error } = await supabase
        .from('wills')
        .delete()
        .eq('id', willId);

      if (error) throw error;

      setWills(prev => prev.filter(w => w.id !== willId));
      alert('Will deleted successfully');
    } catch (error) {
      console.error('Error deleting will:', error);
      alert('Error deleting will');
    }
  };

  const handleUpload = async (willId, file) => {
    try {
      const status = await checkSubscription();
      if (status !== 'yearly') {
        navigate('/subscription');
        return;
      }

      const fileExt = file.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;
      const filePath = `${willId}/${fileName}`;

      const { error: uploadError } = await supabase.storage
        .from('documents')
        .upload(filePath, file);

      if (uploadError) throw uploadError;

      const { error: dbError } = await supabase
        .from('documents')
        .insert([{
          will_id: willId,
          name: file.name,
          file_path: filePath
        }]);

      if (dbError) throw dbError;

      await fetchUserAndWills();
      alert('Document uploaded successfully');
    } catch (error) {
      console.error('Error uploading document:', error);
      alert('Error uploading document');
    }
  };

  const handleSchedule = async (will) => {
    try {
      const status = await checkSubscription();
      if (status !== 'yearly') {
        navigate('/subscription');
        return;
      }
      alert('Scheduling feature coming soon...');
    } catch (error) {
      console.error('Error scheduling:', error);
      alert('Error accessing scheduling feature');
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="text-xl">Loading...</div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-6">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-2xl font-bold">Your Wills Dashboard</h1>
          <p className="text-gray-600">Manage and organize your legal documents</p>
        </div>
        <div className="flex items-center gap-4">
          <span className="text-gray-600">{userEmail}</span>
          <button
            onClick={handleCreateNew}
            className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700"
          >
            Create New Will
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {wills.map((will) => (
          <div key={will.id} className="bg-white rounded-lg shadow p-6">
            <h3 className="text-xl font-semibold">{will.testator_name}'s Will</h3>
            <p className="text-gray-600 text-sm">
              Created: {new Date(will.created_at).toLocaleDateString()}
            </p>
            <p className="text-sm text-gray-600 mb-4">
              Documents: {will.documents?.length || 0}
            </p>

            <div className="grid grid-cols-2 gap-2 mb-4">
              <button
                onClick={() => handleView(will)}
                className="px-4 py-2 bg-gray-100 text-gray-700 rounded hover:bg-gray-200"
              >
                View
              </button>
              <button
                onClick={() => handleEdit(will)}
                className="px-4 py-2 bg-blue-100 text-blue-700 rounded hover:bg-blue-200"
              >
                Edit
              </button>
              <button
                onClick={() => handleDelete(will.id)}
                className="px-4 py-2 bg-red-100 text-red-700 rounded hover:bg-red-200"
              >
                Delete
              </button>
              <label className="px-4 py-2 bg-green-100 text-green-700 rounded hover:bg-green-200 text-center cursor-pointer">
                Upload
                <input
                  type="file"
                  className="hidden"
                  onChange={(e) => {
                    if (e.target.files?.[0]) {
                      handleUpload(will.id, e.target.files[0]);
                    }
                  }}
                />
              </label>
            </div>

            <button
              onClick={() => handleSchedule(will)}
              className="w-full px-4 py-2 bg-purple-100 text-purple-700 rounded hover:bg-purple-200"
            >
              Schedule
            </button>

            {will.documents?.length > 0 && (
              <div className="mt-4">
                <h4 className="font-semibold mb-2">Uploaded Documents</h4>
                <div className="space-y-2">
                  {will.documents.map((doc) => (
                    <div key={doc.id} className="flex justify-between items-center bg-gray-50 p-2 rounded text-sm">
                      <span className="truncate">{doc.name}</span>
                      <span>{new Date(doc.created_at).toLocaleDateString()}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))}
      </div>

      {wills.length === 0 && (
        <div className="text-center py-12">
          <p className="text-gray-600">No wills created yet. Click "Create New Will" to get started.</p>
        </div>
      )}
    </div>
  );
};

export default Dashboard;




















 import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { supabase } from './supabaseClient';

const Dashboard = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const [wills, setWills] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [userEmail, setUserEmail] = useState('');
  const [selectedWill, setSelectedWill] = useState(null);
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);

  useEffect(() => {
    loadDashboard();
    
    // Show success message if coming from form
    if (location.state?.message) {
      alert(location.state.message);
      // Clear the message
      window.history.replaceState({}, document.title);
    }
  }, []);

  const loadDashboard = async () => {
    try {
      setLoading(true);
      setError(null);

      // Check authentication
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      if (authError) throw authError;
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      setUserEmail(user.email);

      // Check subscription status
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('subscription_type, subscription_end')
        .eq('id', user.id)
        .single();

      if (profileError) throw profileError;

      if (!profile || profile.subscription_type !== 'yearly' || 
          (profile.subscription_end && new Date(profile.subscription_end) < new Date())) {
        navigate('/subscription', { 
          state: { expired: true },
          replace: true 
        });
        return;
      }

      // Fetch wills with nested documents
      const { data: willsData, error: willsError } = await supabase
        .from('wills')
        .select(`
          *,
          documents (*)
        `)
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (willsError) throw willsError;
      setWills(willsData || []);

    } catch (error) {
      console.error('Dashboard error:', error);
      setError(error.message || 'Error loading dashboard data');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateNew = () => {
    navigate('/form', {
      state: { isNew: true },
      replace: true
    });
  };

  const handleEdit = (will) => {
    navigate('/form', {
      state: {
        isEditing: true,
        willData: will.content,
        willId: will.id
      },
      replace: true
    });
  };

  const handleDelete = async (willId) => {
    if (!window.confirm('Are you sure you want to delete this will?')) return;

    try {
      setLoading(true);

      // Delete associated documents from storage
      const { data: documents } = await supabase
        .from('documents')
        .select('file_path')
        .eq('will_id', willId);

      if (documents?.length > 0) {
        await supabase.storage
          .from('documents')
          .remove(documents.map(doc => doc.file_path));
      }

      // Delete will (this will cascade delete document references)
      const { error } = await supabase
        .from('wills')
        .delete()
        .eq('id', willId);

      if (error) throw error;

      setWills(prev => prev.filter(w => w.id !== willId));
      alert('Will deleted successfully');

    } catch (error) {
      console.error('Error deleting will:', error);
      alert('Error deleting will. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleDownloadPDF = async (will) => {
    try {
      setSelectedWill(will);
      setIsGeneratingPDF(true);

      if (!will.documents?.[0]?.file_path) {
        throw new Error('No PDF found for this will');
      }

      const { data, error } = await supabase.storage
        .from('documents')
        .download(will.documents[0].file_path);

      if (error) throw error;

      const url = window.URL.createObjectURL(data);
      const link = document.createElement('a');
      link.href = url;
      link.download = `Last_Will_and_Testament_${will.testator_name}.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);

    } catch (error) {
      console.error('Error downloading PDF:', error);
      alert('Error downloading PDF. Please try again.');
    } finally {
      setIsGeneratingPDF(false);
      setSelectedWill(null);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
          <strong className="font-bold">Error! </strong>
          <span className="block sm:inline">{error}</span>
          <button
            onClick={() => loadDashboard()}
            className="mt-2 bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-6">
      {/* Header */}
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Your Wills Dashboard</h1>
          <p className="text-gray-600">Manage and organize your legal documents</p>
        </div>
        <div className="flex items-center gap-4">
          <span className="text-gray-600">{userEmail}</span>
          <button
            onClick={handleCreateNew}
            className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
          >
            Create New Will
          </button>
        </div>
      </div>

      {/* Wills Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {wills.map((will) => (
          <div key={will.id} className="bg-white rounded-lg shadow-md p-6 border border-gray-200">
            {/* Will Header */}
            <div className="mb-4">
              <h3 className="text-xl font-semibold text-gray-900">
                {will.testator_name}'s Will
              </h3>
              <p className="text-sm text-gray-500">
                Created: {new Date(will.created_at).toLocaleDateString()}
              </p>
              {will.updated_at && will.updated_at !== will.created_at && (
                <p className="text-sm text-gray-500">
                  Updated: {new Date(will.updated_at).toLocaleDateString()}
                </p>
              )}
            </div>

            {/* Will Details */}
            <div className="space-y-2 mb-4">
              {will.occupation && (
                <p className="text-sm text-gray-600">Occupation: {will.occupation}</p>
              )}
              {will.address && (
                <p className="text-sm text-gray-600">Address: {will.address}</p>
              )}
              {will.parish && (
                <p className="text-sm text-gray-600">Parish: {will.parish}</p>
              )}
            </div>

            {/* Action Buttons */}
            <div className="grid grid-cols-2 gap-2">
              <button
                onClick={() => handleDownloadPDF(will)}
                disabled={isGeneratingPDF && selectedWill?.id === will.id}
                className="px-4 py-2 bg-blue-100 text-blue-700 rounded hover:bg-blue-200 
                          transition-colors disabled:opacity-50"
              >
                {isGeneratingPDF && selectedWill?.id === will.id ? 'Downloading...' : 'Download PDF'}
              </button>
              <button
                onClick={() => handleEdit(will)}
                className="px-4 py-2 bg-green-100 text-green-700 rounded hover:bg-green-200 
                          transition-colors"
              >
                Edit
              </button>
              <button
                onClick={() => handleDelete(will.id)}
                className="col-span-2 px-4 py-2 bg-red-100 text-red-700 rounded 
                          hover:bg-red-200 transition-colors"
              >
                Delete
              </button>
            </div>

            {/* Documents List */}
            {will.documents?.length > 0 && (
              <div className="mt-4">
                <h4 className="font-semibold text-gray-700 mb-2">Documents</h4>
                <div className="space-y-2">
                  {will.documents.map((doc) => (
                    <div key={doc.id} 
                         className="flex justify-between items-center bg-gray-50 p-2 rounded text-sm">
                      <span className="truncate">{doc.name}</span>
                      <span>{new Date(doc.created_at).toLocaleDateString()}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Empty State */}
      {wills.length === 0 && (
        <div className="text-center py-12">
          <p className="text-gray-600 text-lg">
            No wills created yet. Click "Create New Will" to get started.
          </p>
        </div>
      )}
    </div>
  );
};

export default Dashboard;